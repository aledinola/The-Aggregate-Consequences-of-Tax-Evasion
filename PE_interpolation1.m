function [ED,w0,agg,distrib,policy,value,exitflag_vfi,exitflag_mu] = PE_interpolation1(r0,tau_s,Parameters,Grids,flags,Vguess)

%--------------------------- LEGEND --------------------------------------%
%{
DESCRIPTION:
 This function solves the model in partial equilibrium with interpolation
 w and r are exogenous; individual problem is solved with interpolation
 In particular, while "a" lies on a coarse grid (dimension: nagrid=30), a' is chosen on
 a much finer grid (dimension: nagrid_fine).
 Also, a finer grid (dim: nagrid_dist) for the distribution is used.

INPUTS:
 r0: interest rate
 tau_s: tax parameter to clear gov bc
 Parameters: structure containing parameters
 Grids: structure containing grids
 flags: structure containing flags

OUTPUTS:
 ED: excess demand (it has to be the first output!)
 w0: wage implied by Cobb Douglas focs
 agg: structure with aggregate variables (K/N, total taxes, etc.)
 distrib: structure with distributions
 policy: structure with policy functions
 value: structure with value functions
 exitflag_vfi,exitflag_mu: exit flags for VFI and MU. If >0, failed
%}
%-------------------------------------------------------------------------%

%% Inputs check
%validateattributes(A,classes,attributes) 
validateattributes(r0, {'double'}, {'finite', 'nonnan', 'nonempty', 'real'})
validateattributes(tau_s, {'double'}, {'finite', 'nonnan', 'nonempty', 'real'})
if ~isstruct(Parameters)
    error('Input "Parameters" must be a structure!')
end
if ~isstruct(Grids)
    error('Input "Grids" must be a structure!')
end
if ~isstruct(flags)
    error('Input "flags" must be a structure!')
end


display_iter = flags.display_iter;
main_folder  = flags.main_folder;

%Initialize outputs o/w Matlab complains if we exit the function early
distrib = [];
value   = [];

%% Wage and Capital-Labor ratio

% Compute capital-labor ratio in corporate sector implied by r0
% See equation (1) in the paper
kn = (Parameters.alpha/(r0+Parameters.delta))^(1/(1-Parameters.alpha));
% Compute wage implied by capital-labor ratio (see equation 2)
w0 = (1-Parameters.alpha)*kn^(Parameters.alpha);

if flags.do_GE==1
    disp('*******************************************************************')
    fprintf('General equilibrium iteration                  \n')
    fprintf('Interest rate r:                         %5.7f \n',r0)
    fprintf('capital-labor ratio in corporate sector: %5.4f \n',kn)
    disp('-------------------------------------------------------------------')
end

%% Value Function Initialization - guess
if (~isempty(Vguess) && flags.loadV==1)
    V0 = Vguess;
    disp('Using previous value function...')
else
    V0 = zeros(Parameters.nagrid, Parameters.negrid, Parameters.ntgrid);
end
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% MATLAB to FORTRAN and back
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Find the OS type
os = findos();

%Set path for where the fortran exe is located
mypath = flags.exe_folder;

%Write variables to files (to be ported to FORTRAN for the central loop)
if (display_iter>0)
    disp('SWITCH TO FORTRAN')
    disp('Writing files for the fortran executable.')
    disp('Please wait...')
end

%Here we write variables from MATLAB to FORTRAN
writefiles(r0,w0,tau_s,V0,Parameters,Grids,mypath,flags);
disp('Files written!')

disp('Calling the executable now:')

if (display_iter == 1 || display_iter == 2)
    if strcmp(os, 'unix') == 1 %UNIX
        [fail, ~] = system('./fortran_unix64','-echo');
    elseif strcmp(os, 'unix64') == 1 %UNIX64
        [fail, ~] = system('./fortran_unix64','-echo');
    elseif strcmp(os, 'windows') == 1 %WINDOWS
        [fail, ~] = system('fortran_win64.exe','-echo');
        %[fail, res] = system('fortran_win64_old.exe','-echo');
    elseif strcmp(os, 'mac') == 1 %MAC
        [fail, ~] = system('./fortran_x','-echo');
    else
        error('Specify the variable "os".')
    end
else
    if strcmp(os, 'unix') == 1 %UNIX
        [fail, ~] = system('./fortran_unix64');
    elseif strcmp(os, 'unix64') == 1 %UNIX64
        [fail, ~] = system('./fortran_unix64');
    elseif strcmp(os, 'windows') == 1 %WINDOWS
        [fail, ~] = system('fortran_win64.exe');
        %[fail, res] = system('fortran_win64_old.exe');
    elseif strcmp(os, 'mac') == 1 %MAC
        [fail, ~] = system('./fortran_x','-echo');
    else
        error('Specify the variable "os".')
    end
end

if fail ~= 0
    error('FORTRAN procedure was not executed properly.')
end

%%%%%%%%%%%%%%%%
%BACK in MATLAB
%%%%%%%%%%%%%%%%
%Return to the old path:
cd(main_folder)
if (display_iter>0)
    disp('Reading files generated by fortran.')
    disp('Please wait...')
end

%Here we read variables from FORTRAN to MATLAB
[exitflag_vfi,exitflag_mu,policy,mu,Vw,Vse,V1] = readfiles(Parameters,mypath);
if (display_iter>0); disp('Files read!'); end
    


%% Check Fortran/matlab output

%Check VFI 
if exitflag_vfi>0 
    warning('VFI did not converge succesfully')
end
if exitflag_mu>0
    warning('Distribution did not converge succesfully')
end

% Make sure probabilities sum to one
prSumMu = sum(mu(:));
if max(abs( prSumMu - 1 )) > 1e-5
    error('Probabilities do not sum to one');
end

%% Call file to compute aggregate variables

%save last_run_PE %save here intermediate results for debug

[ED,agg,mu_work,mu_se] = aggregates(kn,r0,w0,tau_s,policy,mu,Parameters,Grids);

%Pack some results
distrib.mu      = mu;
distrib.mu_work = mu_work;
distrib.mu_se   = mu_se;

value.Vw  = Vw;
value.Vse = Vse;
value.V1  = V1;

%% Display results

disp('-------------------------------------------------------------------')
fprintf('Interest rate r: %5.7f \n',r0)
fprintf('Excess demand:   %5.7f \n',ED)
disp('-------------------------------------------------------------------')

end %end function "PE_interpolation1"
