function [exitflag_vfi,exitflag_mu,policy,mu,Vw,Vse,V1] = readfiles(Parameters,mypath)

%--------------------------- LEGEND --------------------------------------%
%{
%% AIM:
This function reads variables from txt files
to be ported from FORTRAN to MATLAB 

%INPUTS
 Parameters: structure with dimension of objects needed
 mypath: tba

%OUTPUTS
 exitflag_vfi,exitflag_mu: exit flags for VFI and MU. If >0, failed
 policy:    structure with policy functions and equilibrium objects 
 mu:        stationary distribution
 Vw,Vse,V1: value functions (workers,SE,all)

In the txt files generated by Fortran arrays are all vectors ==> reshape them

Notes: Updated by Alessandro Di Nola on September 15, 2020

%}

% Unpack structures
nagrid      = Parameters.nagrid;
nagrid_dist = Parameters.nagrid_dist; 
negrid      = Parameters.negrid;
ntgrid      = Parameters.ntgrid;

%Flags
exitflag_vfi = load(fullfile(mypath,'exitflag_vfi.txt'));
exitflag_mu  = load(fullfile(mypath,'exitflag_mu.txt'));

%Distribution, on finer grid with length "nagrid_dist"
mu = reshape(load(fullfile(mypath,'mu.txt')),[nagrid_dist negrid ntgrid]); 

%Real, raw grid with length "nagrid"
policy.policycap = reshape(load(fullfile(mypath,'policycap.txt')),[nagrid negrid ntgrid]); 
policy.policyn   = reshape(load(fullfile(mypath,'policyn.txt')),[nagrid negrid ntgrid]); 
policy.policyphi = reshape(load(fullfile(mypath,'policyphi.txt')),[nagrid negrid ntgrid]); 
policy.apolw   = reshape(load(fullfile(mypath,'apolw.txt')),[nagrid negrid ntgrid]); 
policy.lpolw   = reshape(load(fullfile(mypath,'lpolw.txt')),[nagrid negrid ntgrid]); 
policy.lepol   = reshape(load(fullfile(mypath,'lepol.txt')),[nagrid negrid ntgrid]); 
policy.apolse1 = reshape(load(fullfile(mypath,'apolse1.txt')),[nagrid negrid ntgrid]); 
policy.apolse0 = reshape(load(fullfile(mypath,'apolse0.txt')),[nagrid negrid ntgrid]); 
policy.cpolw   = reshape(load(fullfile(mypath,'cpolw.txt')),[nagrid negrid ntgrid]); 
policy.cpolse0 = reshape(load(fullfile(mypath,'cpolse0.txt')),[nagrid negrid ntgrid]); 
policy.cpolse1 = reshape(load(fullfile(mypath,'cpolse1.txt')),[nagrid negrid ntgrid]); 

%Real, finer grid with length "nagrid_dist"
policy.policycapdet = reshape(load(fullfile(mypath,'policycapdet.txt')),[nagrid_dist negrid ntgrid]); 
policy.policyphidet = reshape(load(fullfile(mypath,'policyphidet.txt')),[nagrid_dist negrid ntgrid]); 
policy.policyndet   = reshape(load(fullfile(mypath,'policyndet.txt')),[nagrid_dist negrid ntgrid]); 
policy.apolwdet     = reshape(load(fullfile(mypath,'apolwdet.txt')),[nagrid_dist negrid ntgrid]);
policy.apolse1det   = reshape(load(fullfile(mypath,'apolse1det.txt')),[nagrid_dist negrid ntgrid]); 
policy.apolse0det   = reshape(load(fullfile(mypath,'apolse0det.txt')),[nagrid_dist negrid ntgrid]); 
policy.lpolwdet     = reshape(load(fullfile(mypath,'lpolwdet.txt')),[nagrid_dist negrid ntgrid]); 
policy.lepoldet     = reshape(load(fullfile(mypath,'lepoldet.txt')),[nagrid_dist negrid ntgrid]); 
policy.cpolwdet     = reshape(load(fullfile(mypath,'cpolwdet.txt')),[nagrid_dist negrid ntgrid]); 
policy.cpolse1det   = reshape(load(fullfile(mypath,'cpolse1det.txt')),[nagrid_dist negrid ntgrid]); 
policy.cpolse0det   = reshape(load(fullfile(mypath,'cpolse0det.txt')),[nagrid_dist negrid ntgrid]); 

%Integer policy functions
policy.occpol    = reshape(load(fullfile(mypath,'occpol.txt')),[nagrid negrid ntgrid]); 
policy.occpoldet = reshape(load(fullfile(mypath,'occpoldet.txt')),[nagrid_dist negrid ntgrid]); 
policy.Icap      = reshape(load(fullfile(mypath,'Icap.txt')),[nagrid negrid ntgrid]);
policy.Inpol     = reshape(load(fullfile(mypath,'Inpol.txt')),[nagrid negrid ntgrid]);
policy.decisl    = reshape(load(fullfile(mypath,'decisl.txt')),[nagrid negrid ntgrid]);
policy.lepolind  = reshape(load(fullfile(mypath,'lepolind.txt')),[nagrid negrid ntgrid]);

%Value functions, on raw grid "nagrid"
Vw  = reshape(load(fullfile(mypath,'Vw.txt')),[nagrid negrid ntgrid]); 
Vse = reshape(load(fullfile(mypath,'Vse.txt')),[nagrid negrid ntgrid]); 
V1  = reshape(load(fullfile(mypath,'V.txt')),[nagrid negrid ntgrid]); 

%-------------------------------------------------------------------------%
%Perform some checks on FORTRAN results
sizeV     = [nagrid, negrid, ntgrid];      %small grid
sizeVfine = [nagrid_dist, negrid, ntgrid]; %finer grid

%Distribution
validateattributes(mu, {'double'}, {'finite', 'nonnan', 'nonempty', 'real','>=',0,'<=',1, 'size', sizeVfine})

%Consumption choice has to be >0
validateattributes(policy.cpolw, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', 'positive', 'size', sizeV})
validateattributes(policy.cpolse0, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', 'positive', 'size', sizeV})
validateattributes(policy.cpolse1, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', 'positive', 'size', sizeV})

%Savings choice a' has to be >=abar, where abar=1e-6 (more generally, could
%be borrowing limit)
validateattributes(policy.apolw, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', '>=',Parameters.abar, 'size', sizeV})
validateattributes(policy.apolse0, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', '>=',Parameters.abar, 'size', sizeV})
validateattributes(policy.apolse1, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', '>=',Parameters.abar, 'size', sizeV})

%Capital and labor hirings choices
validateattributes(policy.policycap, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', '>=',Parameters.kmin, 'size', sizeV})
validateattributes(policy.policyn, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', '>=',Parameters.nmin, 'size', sizeV})

%Labor supply
validateattributes(policy.lpolw, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', '>=',Parameters.minLwork,'<=',Parameters.maxLwork, 'size', sizeV})
validateattributes(policy.lepol, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', '>=',Parameters.minEwork,'<=',Parameters.maxEwork, 'size', sizeV})

%Tax evasion choice
validateattributes(policy.policyphi, {'double'}, {'finite', 'nonnan', 'nonempty', 'real', '>=',0,'<=',1, 'size', sizeV})

end %end function "readfiles"
